#+title: Python Architecture Patterns
#+author: Jaimen Buelta
#+DESCRIPTION: Learn about architecture software
#+startup: showeverything

* CONTENT :toc:
- [[#introduction-to-software-architecture][Introduction to Software Architecture]]
  - [[#defining-the-structue-of-a-system][Defining the structue of a system]]
  - [[#division-into-smaller-units][Division into smaller units]]
  - [[#conways-law---effects-on-software-architecture][Conway's Law - Effects on Software Architecture]]
  - [[#security-aspects-of-software-architecture][Security aspects of software architecture]]
- [[#part-i-design][Part I: Design]]
  - [[#api-design-application-programming-interface][API Design (Application Programming Interface)]]

* Introduction to Software Architecture
** Defining the structue of a system
A medida que la complejidad del software va creciendo también va aumentando la dificultad para realizar cambios, Es por esto que es más fácil hacer cambios siguiendo la estructura que en contra de la misma estructura. Si bien el objetivo principal es crear un sistema que sea fácil y eficiente para cambiar en el futuro, un diseño arquitectónico inteligente tendrá un equilibrio adecuado de facilidad y dificultad basado en los requisitos. Es por esto que la arquitectura de Software se ocupa de implicaciones a largo plazo.

- Para definir una arquitectura de Software se debe tomar encuenta las implicaciones dadas por:
  1. *Bussiness vission*, conducida básicamente por los clientes y el crecimiento comercial.
  2. *Technical requirements*, cumpla con las necesidades técnicas como lo pueden ser la cantidad de usuarios, la rapidez y fluides del sistema etc…
  3. *Security and realiability concerns,* Seguridad he integridad de los datos almacenados.
  4. *Division of tasks*, División de Tareas para el equipo de trabajo.
  5. *Use specific technologies, vinculación con otros sistemas*

Uno de los principales desafíos para un arquitecto de software es trabajar con sistemas existentes. que deben adaptarse, haciendo enfoques incrementales hacia un mejor sistema, todos sin interrumpir la operación diaria normal que mantiene el negocio en funcionamiento.
** Division into smaller units
Dividir en pequeñas partes cumpliento con la claridad en el funcionamiento de cada una de ellas y como interactúa con ellas.

[[./img/LAMP_Architecture.png]]

*Example for an architecture Linux, Apache, MySQL, PHP*

#+begin_quote
*single responsability principle* cada elemento tiene una y solo una única responsabilidad.
#+end_quote

#+begin_quote
The most critical and valuable element of a system is almost always the stored data.
#+end_quote
** Conway's Law - Effects on Software Architecture
Esta ley se cuestiona como la división general de una organización afecta la estructura del software deseado.

- Ejemplos:
  - crear multiples sistemas para cada departamento de la organización.
  - Departamento de Compras y Ventas.

Lo principal para la aplicación exitosa de cualquier arquitectura de software es que la estructura del equipo debe seguir muy de cerca la arquitectura diseñada.

#+begin_quote
Conway's Law should not be considered an impediment to overcome but a reflection of the fact that organizational structure has an impact on the structure of the software.
Software architecture is tightly related to how different teams are coordinated and responsibilities are divided. It has an important human communication component.
#+end_quote

** Security aspects of software architecture
La seguridad tiene una relación muy estrecha con la arquitectura de un sistema. Como vimos Antes, la arquitectura define qué aspectos son fáciles y difíciles de cambiar
y puede hacer que algunas cosas peligrosas sean imposibles de hacer, como saber la contraseña de un usuario, como describimos en el ejemplo anterior. Otras opciones incluyen
no almacenar datos del usuario para mantener la privacidad o reducir los datos expuestos en las API internas, por ejemplo. La seguridad del software es un problema muy difícil y,
a menudo, es un arma de doble filo. y tratar de hacer un sistema más seguro puede tener el efecto secundario de hacer operaciones largas e incómoda


* Part I: Design
Design is the first stage of any successful system, and encompasses everything that you work on before you begin implementation.

1. *The Interface*: Define la funcionalidad desde el punto del vista de un usuario.
2. *Data Storage*: Almacenamiento de los datos.
   #+begin_comment
   Cambiar la forma en que se almacenan los datos en el sistema es difícil una vez que el sistema está en funcionamiento. operación. No es imposible pero requerirá mucho trabajo.
   #+end_comment

** API Design (Application Programming Interface)
Describing how to create useful, yet flexible, interface.
