#+title: Clean Code
#+author: Alejandro Ayala
#+STARTUP: showeverything

* CONTENIDO :toc:
- [[#prologo][Prologo]]
- [[#introducción][Introducción]]
- [[#capítulo-1-código-limpio][Capítulo 1: Código Limpio.]]
  - [[#hágase-el-código][Hágase el Código:]]
  - [[#código-incorrecto][Código Incorrecto:]]
  - [[#el-coste-total-de-un-desastre][El Coste Total de un Desastre:]]
  - [[#el-gran-cambio-de-diseño][El Gran cambio de diseño:]]
  - [[#actitud][Actitud:]]
  - [[#el-enigma][El Enigma:]]
- [[#citas][Citas]]

* Prologo
En medio de la situación y el contexto actual en el que vivimos los afánes por la producción inmediata
nos terminamos olvidando de los detalles. En los detalles se encuentra la minuciosidad con la que se planeó un proyecto. En medio de la instrumentalización debemos recordar que no solo se trata de escribir para cumplir, también se trata de ser profesional similar a un artista que se fija en los detalles y en lo inmaculado de su obra ya que maś que instrumentos también se es una persona que piensa, siente y trabaja para crear su propia obra (producto).

Tomarse el tiempo de escribir con sentido ó entrando en el tema "Código Limpio" es una parte vital dado que no solo se trata de finalizar un producto como si este no tuviese continuidad y fuese a quedar inmovil en el tiempo. Por el contrarío el software es una parte que se encuentra en permanente cambio y movimiento. Software mal construido es el que esta pensado para no cambiar.

TPM (Total Productive Maintenance), se centra en el mantenimiento y no en la producción.
Filosofía 5s:

1. Seiri (Organización): Saber donde están las cosas y por ende poderlas encontrar con facilidad.
2. Seiton (Sistematización): Cada cosa en su sitio.
3. Seiso (Limpieza): Inundar el codigo con información que no aporta.
4. Seiketsu (Estandarización): Generar estandares y buenas practicas.
5. Shutsuke (Disciplina): Seguir las buenas practicas y reflejarlas en el trabajo.

Planear, Prevenir y adelantarse, ser precavido, ser disciplinado y permanentemente realizar mantemiento
son practicas que un buen profesional debe realizar. Siendo un profesional el que aquel permanentemente esta buscando ascender(Subir de Nivel) ó aquel que cada vez se fija más en los detalles.

En general podría decirse que siempre estamos reparando.

#+BEGIN_QUOTE Paul Valery
Un poema no se acaba nunca y debe estarse retocando continuamente. Dejar de trabajar en el poema es
señal de abandono.
#+END_QUOTE

- ¿Hemos hecho todo lo posible para dejar las cosas mejor que como las encontramos?
- ¿Hemos refactorizado el código antes de terminarlo?

* Introducción
[[./img/wtf_is_this_shit.png]]

#+begin_quote
- ¿Qué puerta representa su código?
- ¿Qué puerta representa a su equipo o asu empresa?
- ¿Porqué estamos en esa habitación?
- ¿Es una sencilla revisión del código o hemos detectado un sinfín de problemas terribles?
- ¿Depuramos presas del pánico el código que pensábamos que funcionaba?
- ¿Los clientes huyen despavoridos y los directores nos pisan los talones?
- ¿Cómo asegurarnos de que abrimos la puerta correcta cuando las cosas se ponen feas?

  Respuesta: La Maestría.
  La maestría se consigue de dos formas: conocimientos y trabajo. Debe adquirir el conocimiento de los principios, patrones, prácticas y heurística propios de un maestro, y dominar dichos conocimientos a través de la práctica.
#+end_quote

* Capítulo 1: Código Limpio.
** Hágase el Código:
El código nunca desaparecerá, ya que representa los detalles de los requisitos. Es por esto que el código debe ser:

- Riguroso.
- Preciso.
- Formal.
- Detallado.

Los requisitos bien especificados son tan formales como el código y que pueden actuar como pruebas ejecutables de dicho código. El código es la base para indicar lo de forma precisa lo que deseamos y por esto no desaparecerá.
** Código Incorrecto:

#+begin_quote
El Código incorrecto fue el motivo del fin de la empresa.

Sortearnos a lo largo del código. Arrastrarse por una maraña de zarsas y trampras ocultas. Intentamos buscar el camino, una pista de lo que está pasando, pero lo único que vemos es más y más código sin sentido.

Todos hemos visto el lío en el que estábamos y hemos optado por dejarlo para otro día. Todos hemos sentido el alivio de ver cómo un programa incorrecto funcionaba y hemos decidido que un mla programa que funciona es mejor que nada.
#+end_quote
** El Coste Total de un Desastre:

El código mal escrito es como una bola de nieve, crece, crece y crece hasta que se vuelve inmanejable. Causando que la productividad del equipo disminuya y acabe por desaparecer.

** El Gran cambio de diseño:
Los cambios de diseño no siempre resultan ser la mejor estrategía para solucionar la deuda técnica. Corriendo el riesgo de caer en un circulo vicioso. Mal codígo crea más mal código.

#+begin_quote
Dedicar tiempo a que el código sea correcto no sólo es rentable, es una cuestión de supervivencia profesional.
#+end_quote

** Actitud:

No ser profesional.

#+begin_quote
imagine que es médico y un paciente le exige que no se lave las manos antes de una operación porque se pierde demasiado tiempo[2]. En este caso, el paciente es el jefe, pero el médico debe negarse a lo que pide.
¿Por qué? Porque el médico sabe más que el paciente sobre los riesgos de
infecciones. No sería profesional (incluso sería ilegal) que el médico cediera a las exigencias del paciente.

Tampoco sería profesional que los programadores cedieran a la voluntad
de los jefes que no entienden los riesgos de un posible desastre.
#+end_quote

** El Enigma:
*No se Cumple un plazo de entrega cometiendo un error*


* Citas
#+BEGIN_QUOTE
- Las cosas pequeñas importan.
- Dios está en los detalles.
- La práctica del Software requiere disciplina.
- Crear código legible es tan importante como crear código ejecutable.
- De pequeñas semillas crecen grandes árboles.
- Más vale prevenir que curar.
#+END_QUOTE

- **Ley de LeBlanc: Después es igual a nunca.**
