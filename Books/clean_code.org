0#+title: Clean Code
#+author: Alejandro Ayala
#+STARTUP: show2levels

* CONTENIDO :toc:
- [[#prologo][Prologo]]
- [[#introducción][Introducción]]
- [[#capítulo-1-código-limpio][Capítulo 1: Código Limpio.]]
  - [[#hágase-el-código][Hágase el Código:]]
  - [[#código-incorrecto][Código Incorrecto:]]
  - [[#el-coste-total-de-un-desastre][El Coste Total de un Desastre:]]
  - [[#el-gran-cambio-de-diseño][El Gran cambio de diseño:]]
  - [[#actitud][Actitud:]]
  - [[#el-enigma][El Enigma:]]
  - [[#el-arte-del-código-limpio][¿El arte del código limpio?]]
  - [[#concepto-de-código-limpio][Concepto de código limpio]]
  - [[#la-regla-del-boy-scout][La regla del Boy Scout]]
  - [[#conclusión][Conclusión]]
- [[#capítulo-2-nombre-con-sentido][Capítulo 2: Nombre con sentido.]]
  -  [[#conclusión-1][Conclusión.]]
- [[#capítulo-3-funciones][Capítulo 3: Funciones.]]
- [[#citas][Citas]]

* Prologo
En medio de la situación y el contexto actual en el que vivimos los afánes por la producción inmediata
nos terminamos olvidando de los detalles. En los detalles se encuentra la minuciosidad con la que se planeó un proyecto. En medio de la instrumentalización debemos recordar que no solo se trata de escribir para cumplir, también se trata de ser profesional similar a un artista que se fija en los detalles y en lo inmaculado de su obra ya que maś que instrumentos también se es una persona que piensa, siente y trabaja para crear su propia obra (producto).

Tomarse el tiempo de escribir con sentido ó entrando en el tema "Código Limpio" es una parte vital dado que no solo se trata de finalizar un producto como si este no tuviese continuidad y fuese a quedar inmovil en el tiempo. Por el contrarío el software es una parte que se encuentra en permanente cambio y movimiento. Software mal construido es el que esta pensado para no cambiar.

TPM (Total Productive Maintenance), se centra en el mantenimiento y no en la producción.
Filosofía 5s:

1. Seiri (Organización): Saber donde están las cosas y por ende poderlas encontrar con facilidad.
2. Seiton (Sistematización): Cada cosa en su sitio.
3. Seiso (Limpieza): Inundar el codigo con información que no aporta.
4. Seiketsu (Estandarización): Generar estandares y buenas practicas.
5. Shutsuke (Disciplina): Seguir las buenas practicas y reflejarlas en el trabajo.

Planear, Prevenir y adelantarse, ser precavido, ser disciplinado y permanentemente realizar mantemiento
son practicas que un buen profesional debe realizar. Siendo un profesional el que aquel permanentemente esta buscando ascender(Subir de Nivel) ó aquel que cada vez se fija más en los detalles.

En general podría decirse que siempre estamos reparando.

#+BEGIN_QUOTE Paul Valery
Un poema no se acaba nunca y debe estarse retocando continuamente. Dejar de trabajar en el poema es
señal de abandono.
#+END_QUOTE

- ¿Hemos hecho todo lo posible para dejar las cosas mejor que como las encontramos?
- ¿Hemos refactorizado el código antes de terminarlo?

* Introducción
[[./img/wtf_is_this_shit.png]]

#+begin_quote
- ¿Qué puerta representa su código?
- ¿Qué puerta representa a su equipo o asu empresa?
- ¿Porqué estamos en esa habitación?
- ¿Es una sencilla revisión del código o hemos detectado un sinfín de problemas terribles?
- ¿Depuramos presas del pánico el código que pensábamos que funcionaba?
- ¿Los clientes huyen despavoridos y los directores nos pisan los talones?
- ¿Cómo asegurarnos de que abrimos la puerta correcta cuando las cosas se ponen feas?

  Respuesta: La Maestría.
  La maestría se consigue de dos formas: conocimientos y trabajo. Debe adquirir el conocimiento de los principios, patrones, prácticas y heurística propios de un maestro, y dominar dichos conocimientos a través de la práctica.
#+end_quote

* Capítulo 1: Código Limpio.
** Hágase el Código:
El código nunca desaparecerá, ya que representa los detalles de los requisitos. Es por esto que el código debe ser:

- Riguroso.
- Preciso.
- Formal.
- Detallado.

Los requisitos bien especificados son tan formales como el código y que pueden actuar como pruebas ejecutables de dicho código. El código es la base para indicar lo de forma precisa lo que deseamos y por esto no desaparecerá.
** Código Incorrecto:

#+begin_quote
El Código incorrecto fue el motivo del fin de la empresa.

Sortearnos a lo largo del código. Arrastrarse por una maraña de zarsas y trampras ocultas. Intentamos buscar el camino, una pista de lo que está pasando, pero lo único que vemos es más y más código sin sentido.

Todos hemos visto el lío en el que estábamos y hemos optado por dejarlo para otro día. Todos hemos sentido el alivio de ver cómo un programa incorrecto funcionaba y hemos decidido que un mla programa que funciona es mejor que nada.
#+end_quote
** El Coste Total de un Desastre:

El código mal escrito es como una bola de nieve, crece, crece y crece hasta que se vuelve inmanejable. Causando que la productividad del equipo disminuya y acabe por desaparecer.

** El Gran cambio de diseño:
Los cambios de diseño no siempre resultan ser la mejor estrategía para solucionar la deuda técnica. Corriendo el riesgo de caer en un circulo vicioso. Mal codígo crea más mal código.

#+begin_quote
Dedicar tiempo a que el código sea correcto no sólo es rentable, es una cuestión de supervivencia profesional.
#+end_quote

** Actitud:

No ser profesional.

#+begin_quote
imagine que es médico y un paciente le exige que no se lave las manos antes de una operación porque se pierde demasiado tiempo[2]. En este caso, el paciente es el jefe, pero el médico debe negarse a lo que pide.
¿Por qué? Porque el médico sabe más que el paciente sobre los riesgos de
infecciones. No sería profesional (incluso sería ilegal) que el médico cediera a las exigencias del paciente.

Tampoco sería profesional que los programadores cedieran a la voluntad
de los jefes que no entienden los riesgos de un posible desastre.
#+end_quote

** El Enigma:

*No se Cumple un plazo de entrega cometiendo un error*

** ¿El arte del código limpio?
Desarrollar el sentido para escribir código limpio.. El programador es un artista que puede transformar un lienzo en blanco en un sistema de código elegante.

** Concepto de código limpio
#+begin_quote Bjarne Stroustrup
+ Elegante y eficaz.
+ Lógica correcta.
+ Dependencias mínimas.
+ El código limpio hace bien una cosa.
#+end_quote

#+begin_quote Metafora de las ventanas rotas
Un edificio con ventanas rotas parece abandonado. Y hace que otros lo abandonen. Dejan que se rompan otras ventanas. E incluso las rompen a propósito. La fachada se ensucia con pintadas y se acumula la basura. Una ventana rota inicia el proceso de la decadencia.
#+end_quote

El código limpio muestra gran atención al detalle y hace solo una cosa bien.

#+begin_quote Grady Booch
El código limpio es simple y directo. El código limpio se lee como un texto bien escrito. El código limpio no oculta la intención del diseñador, sino que muestra nítidas abstracciones y líneas directas de control.
#+end_quote
- Facíl de leer (Legibilidad).


#+begin_quote Dave Thomas
El código limpio se puede leer y mejorar por parte de un programador
que no sea su autor original. Tiene pruebas de unidad y de aceptación.
Tiene nombres con sentido. Ofrece una y no varias formas de hacer algo. Sus dependencias son mínimas, se definen de forma explícita y ofrece una API clara y mínima. El código debe ser culto en función del lenguaje, ya que no toda la información necesaria se puede expresar de forma clara en el código.
#+end_quote
- Código controlado por pruebas.

#+begin_quote Michael Feathers
Podría enumerar todas las cualidades del código limpio, pero hay una
principal que engloba a todas ellas. El código limpio siempre parece que ha sido escrito por alguien a quien le importa. No hay nada evidente que hacer para mejorarlo. El autor del código pensó en todos los aspectos posibles y si intentamos imaginar alguna mejora, volvemos al punto de partida y sólo nos queda disfrutar del código que alguien a quien le importa realmente nos ha proporcionado
#+end_quote

- El código limpio es aquél al que se le ha dado importancia. Alguien ha dedicado su tiempo para que sea sencillo y ha prestado atención a los detalles. Se ha preocupado.

- En estos breves párrafos, Ron resume el contenido de este libro. Nada de duplicados, un objetivo, expresividad y pequeñas abstracciones. Todo está ahí.

- La próxima vez que escriba una línea de código, recuerde que es un autor y que escribe para que sus lectores juzguen su esfuerzo.

** La regla del Boy Scout
#+begin_quote
Dejar el campamento más limpio de lo que se ha encontrado.
#+end_quote

** Conclusión
#+begin_quote
¿Recuerda el chiste sobre el violinista que se pierde camino de un concierto?
Se cruza con un anciano y le pregunta cómo llegar al Teatro Real.

El anciano mira al violinista y al violín que lleva bajo el brazo y le responde:

«Practique joven, practique».

#+end_quote

- La practica hace al maestro.

* Capítulo 2: Nombre con sentido.
1. *Usar nombres que revelen las intenciones.*
   - ¿Por qué existe?
   - ¿Qué hace?
   - ¿Cómo se usa?

2. *Evitar la desinformación.*
   - Evitar asignar nombres que no den información veridica de porque existen.

3. *Realizar distinciones con sentido.*
   - Buscar agregar información, no duplicar información que no generé  distinciones.
     Debe diferenciar los nombres de forma que el lector aprecie las diferencias.

4. *Usar nombres que se puedan pronunciar.*
   - Crear nombres pronunciables.

5. *Usar nombres que se puedan buscar.*
   Los nombres de una letra y las constantes numéricas tienen un problema: no son fáciles de localizar en el texto.

6. *No utilizar prefijos, mejor un nombre completo y con sentido*
7. *Evitar asignaciones mentales*
   #+begin_comment
   Una diferencia entre un programador inteligente y un programador profesional es que este último sabe que la claridad es lo que importa. Los profesionales usan sus poderes para hacer el bien y crean código que otros puedan entender.
   #+end_comment

8. *Nombres de clases*
   Las clases y los objetos deben tener nombres o frases de nombre como Customer, WikiPage, Account y AddressParser. Evite palabras como Manager, Processor, Data, o Info en el nombre de una clase. El nombre de
   una clase no debe ser un verbo.

9. *Nombres de Metodos.*
   Los métodos deben tener nombres de verbo como postPayment, deletePage o save. Los métodos de acceso, de modificación y los predicados deben tener como nombre su valor y usar como prefijo get, set e is.

10. *No se exceda con el atractivo*
    Si los nombres son demasiado inteligentes, sólo los recordarán los que compartan el sentido del humor de su autor, y sólo mientras se acuerden del chiste. ¿Sabrán qué significa la función HolyHandGrenade?
    Sin duda es atractiva, pero en este caso puede que DeleteItems fuera más indicado. Opte por la claridad antes que por el entretenimiento. En el código, el atractivo suele aparecer como formas
    coloquiales o jergas. Por ejemplo, no use whack() en lugar de kill(). No recurra a bromas culturales como eatMyShorts() si quiere decir abort(). Diga lo que piense. Piense lo que diga.

11. *Una palabra por concepto*
    Unificar el lenguaje

12. *No haga juegos de palabras*
    Nuestro objetivo, como autores, es facilitar la comprensión del código. Queremos que el código sea algo rápido, no un estudio exhaustivo. Queremos usar un modelo en el que el autor sea el responsable de transmitir el significado, no un modelo académico que exija investigar el significado mostrado.

13. *Usar nombres de dominios de soluciones*
    Recuerde que los lectores de su código serán programadores. Por ello, use términos informáticos, algoritmos, nombres de patrones, términos matemáticos y demás.

14. *Usar nombres de dominios de problemas*
    Cuando no exista un término de programación para lo que esté haciendo, use el nombre del dominio de problemas.

15. *Añadir contexto con sentido.*

16. *No añadir contextos inncesarios*
    Los nombres breves suelen ser más adecuados que los extensos, siempre que sean claros. No añada más contexto del necesario a un nombre. Los nombres accountAddress y customerAddress son perfectos para instancias de la clase Address pero no sirven como nombres de clase. Address sirve como nombre de clase. Para distinguir entre direcciones MAC, direcciones de puertos y direcciones Web, podría usar PostalAddress, MAC y URI. Los nombres resultantes son más precisos, el objetivo de cualquier nombre.

**  Conclusión.
Lo más complicado a la hora de elegir un buen nombre es que requiere habilidad descriptiva y acervo cultural. Es un problema de formación más que técnico, empresarial o administrativo. Como resultado, mucha gente del sector no aprende a hacerlo bien. La gente teme que al cambiar los nombres otros programadores se quejen. Nosotros no compartimos ese temor y agradecemos los cambios de nombre (siempre que sean a mejor). En muchos casos no memorizamos los nombres de clases y métodos. Usamos herramientas modernas para estos detalles y así poder centrarnos en si el código se lee como frases o párrafos, o al menos como tablas y estructuras de datos (una frase no siempre es la mejor forma de mostrar datos). Seguramente acabará sorprendiendo a alguien cuando cambie los nombres, como puede

* Capítulo 3: Funciones.
¿Qué tiene la función del Listado 3-2 para que resulte sencilla de leer y entender?
¿Qué hay que hacer para que una función transmita su intención?
¿Qué atributos podemos asignar a nuestras funciones para que el lector pueda intuir el tipo de programa al que pertenecen?

  - Tamaño reducido.
    - Aproximadamente 20 líneas (Por poner un tamaño).
  - Bloques y sangrado.
    - Uno o dos niveles de sangrado
  - Hacer una sola cosa.
    #+begin_quote
    LAS FUNCIONES SÓLO DEBEN HACER UNA COSA. DEBEN HACERLO BIEN Y DEBE SER LO ÚNICO QUE HAGAN.

    Para renderPageWithSetupsAndTeardowns, comprobamos si la página es de prueba y,
    en caso afirmativo, incluimos las configuraciones y los detalles.
    En ambos casos, la representamos en HTML.

    Si una función sólo realiza los pasos situados un nivel por debajo del
    nombre de la función, entonces hace una cosa.
    #+end_quote
  - Secciones en funciones.
    #+begin_quote
    Fíjese en el Listado 4-7. Verá que la función generatePrimes se divide en
    secciones como declaraciones, inicializaciones y filtros. Es un síntoma
    evidente de que hace más de una cosa. Las funciones que hacen una sola cosa
    no se pueden dividir en secciones.
    #+end_quote

  - Un nivel de abstracción por función.
  - Leer código de arriba a abajo :: la regla descendente
    El Objetivo es que el código se lea como un texto de arriba a abajo.

    Queremos leer el programa como si fuera un conjunto de párrafos TO.
    #+begin_quote
    Para incluir configuraciones y detalles, incluimos configuraciones,
    después del contenido de la página de prueba, y por último los
    detalles.

    Para incluir las configuraciones, incluimos la configuración de suite
    si se trata de una suite, y después la configuración convencional.

    Para incluir la configuración de suite; buscamos la jerarquía
    principal de la página SuiteSetUp y añadimos una instrucción
    include con la ruta de dicha página.
    Para buscar la jerarquía principal…
    #+end_quote
  - Usar nombres descriptivos ::
    No tema los nombres extensos. Un nombre descriptivo extenso
    es mucho mejor que uno breve pero enigmático.

  - Argumentos de Funciones ::
    El número ideal de argumentos para una función es cero.

    * monádico: 1 argumento.
    * diádico: 2 argumentos.
    * triádico: 3 argumentos
    * poliádico: Más de 3 argumentos.

  - Formas monádicas habituales ::
    Motivos principales para usar un solo argumento a una funció.

    1. Realizar una pregunta sobre el argumento.
       #+begin_src python
def fileExists():
    pass

fileExists("MyFile")
       #+end_src

    2. Procese el argumento, lo transforme en otra cosa y lo devuelva.

  - Argumentos de indicador ::
    Pasar  un valor Booleano a una función es una práctica totalmente desaconsejable.

  - Verbos y Palabras Clave ::
    la función y el argumento deben formar un par de verbo y
    sustantivo. Por ejemplo, write(name) resulta muy evocador. Sea lo que sea
    name, sin duda se escribe (write).

  - Mejor Exceptionces que devolver códigos de error.
  - No repetirse.
  - Programación Estructurada.
  - Cómo crear este tipo de funciones.
    Por tanto, retoco el código, divido las funciones, cambio los nombres y
    elimino los duplicados. Reduzco los métodos y los reordeno. En ocasiones,
    elimino clases enteras, mientras mantengo las pruebas.
    Al final, consigo funciones que cumplen las reglas detalladas en este capítulo.
    No las escribo al comenzar y dudo que nadie pueda hacerlo.

  - Conclusión ::
    Los programadores experimentados piensan en los sistemas como en historias que contar, no como en programas que escribir. Recurren a las prestaciones del lenguaje de programación seleccionado para crear un lenguaje expresivo mejor y más completo que poder usar para contar esa historia. Parte de ese lenguaje es la jerarquía de funciones que describen las acciones que se pueden realizar en el sistema. Dichas acciones se crean para usar el lenguaje de dominio concreto que definen para contar su pequeña
    parte de la historia.

    Un sistema nos cuenta una historia.

* Citas
#+BEGIN_QUOTE
- Las cosas pequeñas importan.
- Dios está en los detalles.
- La práctica del Software requiere disciplina.
- Crear código legible es tan importante como crear código ejecutable.
- De pequeñas semillas crecen grandes árboles.
- Más vale prevenir que curar.
#+END_QUOTE

*Ley de LeBlanc: Después es igual a nunca.*
