#+title: Django
#+author: Alejandro Ayala
#+startup: showeverything

* Django: :toc:
- [[#how-does-django-work-mvt][How Does Django Work?: MVT]]
- [[#install][Install]]
- [[#first-project][First Project]]
  - [[#initilialize-new-project][Initilialize new project]]
  - [[#run-the-server][Run the server]]
  - [[#crea-applications][Crea applications]]
  - [[#steps][Steps]]
- [[#desarrollo-web][Desarrollo Web]]
  - [[#objetos-solicitud-y-respuesta][Objetos Solicitud y Respuesta]]
  - [[#obtener-vistas-desde-templates-django][Obtener vistas desde Templates Django.]]
  - [[#url][URL]]
  -  [[#url-con-expresiones-regulares][URL con Expresiones regulares]]
  - [[#espacio-de-nombres-de-la-aplicacion][Espacio de nombres de la aplicacion]]
  - [[#manejo-de-errores-en-vistas][Manejo de Errores en Vistas]]
  - [[#clases-de-excepicon][Clases de Excepicon]]
  - [[#modelar-relaciones][Modelar Relaciones]]
- [[#migraciones][Migraciones]]
- [[#forms][Forms]]

* How Does Django Work?: MVT
- Model
- View
- Template
* Install
 #+begin_src bash
pip3 install django
 #+end_src

* First Project
** Initilialize new project
 #+begin_src bash
django-admin startproject my_tennis_club
 #+end_src
** Run the server
 #+begin_src bash
python3 manage.py runserver
 #+end_src
** Crea applications
 #+begin_src bash
python3 manage.py startapp members
 #+end_src
** Steps
1. Views: Django views are Python functions that takes http requests and returns http response, like HTML documents.
2. Urls.
3. Templates.
4. Models.
   1. Create the migrations of the database.
      #+begin_src bash
      python3 manage.py makemigrations members
      #+end_src
   2. Execute the migrations.
      #+begin_src bash bash
      python3 manage.py migrate
      # ver una migración en especifico
      python3 manage.py slqmigrate members 001
      #+end_src
   3. add records.
      #+begin_src bash
      python3 manage.py shell
      #+end_src

      #+begin_src python
      from members.models import Member

      # Hit [enter] and write this to look at the empty Member table:
      Member.objects.all()

      # Create First Record
      member1 = Member(firstname='Alejandro', lastname='Ayala')
      member1.save()
      member2 = Member(firstname='Marcela', lastname='Ayala')
      member2.save()
      member3 = Member(firstname='Andrea', lastname='Ayala')
      member3.save()

      # See if the Member table got a member
      Member.objects.all().values()
      #+end_src
   4. **Note** Remember run migrations

* Desarrollo Web::
Http, Protocol used by clients and web servers. It works to transfer web resources such as HTML files.

**Method:** GET **Version** / HTTP/1.1
**Path:** Host: developer.mozilla.org
**Headers** Accept-Language: en


Codigo de Errores.
| Informational | 100-199 | Provisional\ Interim response\ 100 Continue                                                |
| Successful    | 200-299 | Successfully Processed\200 Ok                                                              |
| Redirection   | 300-399 | Moved\ 301 Moved Permanentyly \ 302 Found                                                  |
| Client Error  | 400-499 | Client Error responses\ 400 Bad Request\ 401 Unauthorized \ 403 Forbidden \ 404 Not Found  |
| Server Error  | 500-599 | Server Error \ 500 Internal Server Error                                                   |

** Objetos Solicitud y Respuesta::
Una aplicacion web funciona segun el principio de un ciclo de solicitud-respuesta en una arquitectura cliente-servidor, mediante el protocolo HTTP.

*Django* maneja la solicitud y la respuesta con la ayuda de las clases *HttpRequest* y *HttpResponse* en el modulo django.http

La lógica de vista utiliza este atributo para identificar cómo el cliente se ha acercado al servidor. Un navegador envía su solicitud mediante cualquier método HTTP o verbos:  POST, GET, DELETE, y PUT.

Dentro de la función de vista, se pueden ejecutar diferentes bloques condicionales según el valor del atributo del método. Por ejemplo:

#+begin_src python
if request.method == 'GET':
    do_something()
elif request.method == 'POST':
    do_something_else()
#+end_src

De acuerdo con el principio *REST* (Representational State Transfer)
*** request.GET and request.POST
Los atributos devuelven un objeto similar a un diccionario que contiene los parámetros GET y POST, respectivamente.
*** request.COOKIES
Junto con los parámetros, el navegador también empaqueta los objetos solicitud con cookies insertadas por interacciones previas del servidor. Es un diccionario de claves y valores de cadena.
*** request.FILES
Cuando el usuario carga uno o más archivos con un formulario de varias partes, están presentes en este atributo en forma de objetos UploadedFile (archivo cargado). Según la lógica apropiada en la vista, estos archivos cargados se guardan en la carpeta designada en el servidor.
*** request.user
El objeto solicitud también contiene información sobre el usuario actual. Este atributo es un objeto de la clase django.contrib.auth.models.User. Sin embargo, si el usuario no está autenticado, devuelve AnonymousUser. Dentro de la vista, puede establecer una lógica separada para cualquiera de ellos.

#+begin_src python
if request.user.is_authenticated():
    # Do something for logged-in users.
    pass
else:
    # Do something for anonymous users.
#+end_src
*** request.has_key()
Este es un método disponible para el objeto solicitud. Ayuda a verificar si el diccionario de parámetros GET o POST cuenta con un valor para la clave dada.

** Obtener vistas desde Templates Django.
#+begin_src python
from django.http import HttpResponse
from django.template import loader

def index(reques):
    template = loader.get_template('demoapp/indes.html')
    context={}
    return HttpResponse(template.render(context, request))
#+end_src

#+begin_src python
from django.http import HttpResponse
def index(request):
    path = request.path
    method = request.method
    content='''
<center><h2>Testing Django Request Response Objects</h2>
<p>Request path : " {}</p>
<p>Request Method :{}</p></center>
'''.format(path, method)
    return HttpResponse(content) 
#+end_src

** URL
SCHEME + SUBDOMAIN + DOMAIN + FILE PATH + PARAMETER

*SCHEME*: HTTP | HTTPS
*SUBDOMAIN*: WWW
*DOMAIN*: SECOND LEVEL DOMAIN + TOP LEVEL DOMAIN
*FILE PATH*: LOCATION OF A RESOURCE
*PARAMETER*: STRUCTURE ADDITIONAL INFORMATION

*** Parametros
#+begin_src python url.py
path('getuser/<name>/<id>', views.pathview, name='pathview')
#+end_src

#+begin_src python
from django.http import HttpResponse
def pathview(request, name, id):
    return HttpResponse("Name: {} UserID:{}".format(name, id))
#+end_src

str - coincide con cualquier cadena que no esté vacía y excluye el separador de ruta '/'. TEste es el valor predeterminado si no se incluye un convertidor en la expresión.

int - coincide con cero o cualquier entero positivo y devuelve un int. Por ejemplo:/customer/<int:id>

slug - coincide con cualquier cadena de slug que consista en letras o números ASCII, incluidos los guiones y guiones bajos.

uuid - coincide con un UUID formateado.  Por ejemplo: 075194d3-6885-417e-a8a8-6c931e272f00 y devuelve una instancia de UUID.

path - coincide con cualquier cadena que no esté vacía e incluye el separador de ruta '/'.

*** Parametros de consulta
#+begin_src python url.py
path('getuser/', views.qryview, name='qryview')
#+end_src

Declare la función  qryview en el archivo views.py.

#+begin_src python
from django.http import HttpResponse

def qryview(request):
    id = request.GET['id']
    return HttpResponse("Name: {} UserID:{}".format(name, id))
#+end_src

*** Parametros del cuerpo
Un formulario HTML envía los datos a la URL mencionada en su atributo de acción mediante el método POST. TEl método POST es una forma más segura de enviar datos que el método GET porque los datos no se revelan en la URL.

Construyamos un formulario simple que contenga dos elementos de entrada de texto. Luego, guárdelo como form.html en la carpeta templates.

#+begin_src html
<form action="/myapp/getform/" method="POST">
    {% csrf_token %}
    <p>Name: <input type="text" name="id"></p>
    <p>UserID :<input type="name" name="name"></p>
    <input type="submit">
</form>
#+end_src

#+begin_src python
path("showform/", views.showform, name="showform"),
path("getform/", views.getform, name='getform'),
#+end_src

#+begin_src python
from django.http import HttpResponse
from django.shortcuts import render

def showform(request):
    return render(request, "form.html")

def getform(request):
    if request.method == "POST":
        id=request.POST['id']
        name=request.POST['name']
    return HttpResponse("Name:{} UserID:{}".format(name, id))
#+end_src

**  URL con Expresiones regulares::
#+begin_src python
urlpatterns = [
    re_path(r'^menu_item/[0-9]{2})/$', views.display_menu_item),
]
#+end_src

#+begin_src python
from django.urls import path, re_path
from . import views

urlpatterns = [
    path('menu_item/10', views.display_menu_item),
    re_path(r'^menu_item/[0-9]{2})/$', views.display_menu_item),
]
#+end_src

Uso de la funcion reverse de Django

#+begin_src python
(venv) [raskolnikov@rodia frameworks]$ python3 chefsTable/manage.py shell
Python 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.urls import reverse
>>> reverse('index')
'/littlelemon/'
>>>
#+end_src

** Espacio de nombres de la aplicacion::
El espacio de nombres de la aplicacion se crea mediante la variable app_name en el archivo urls.py de la
aplicacion y asignandole el nombre de la aplicacion. En el script demoapp/urls.py realice el cambio mediante
el siguiente codigo:

#+begin_src python
#demoapp/urls.py
from django.urls import path
from . import views
app_name='demoapp'
urlpatterns = [
    path('', views.index, name='index'),
] 
#+end_src

Para obtener la ruta URL de la función index() (índice), llame a la función reverse() (inversa) anteponiéndole el espacio de nombres.
#+begin_src python
(venv) [raskolnikov@rodia frameworks]$ python3 chefsTable/manage.py shell
Python 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.urls import reverse
>>> reverse('demoapp:index')
'/littlelemon/'
>>>
#+end_src

*Espacio de nombres de instancia*
#+begin_src python
#in demoproject/urls.py
urlpatterns=[
    # ...
    path('demo/', include('demoapp.urls', namespace='demoapp')),
    # ...
]
#+end_src

*Uso del espacio de nombres en la vista*
#+begin_src python
from django.http import HttpResponsePermanentRedirect
from django.urls import reverse

def myview(request):
    ....
    return HttpResponsePermanentRedirect(reverse('demoapp:login'))
#+end_src

*Espacio de nombres en la etiqueta de url*
Se envía un formulario HTML a la URL especificada en el atributo de acción.

#+begin_src html
<form action="/demoapp/login" method="post">

#form attributes

<input type='submit'>

</form> 
#+end_src

** Manejo de Errores en Vistas::
En una aplicación Django, una función de vista es donde se realiza todo el procesamiento. Recibe la solicitud y formula la respuesta.
Django tiene una clase genérica HttpResponseNotFound. Puede devolver su objeto para transmitir el mensaje apropiado.

#+begin_src python
from django.http import HttpResponse, HttpResponseNotFound

def my_view(request):
    # ...
    if condition:
        return HttpResponseNotFound('<h1>Page not found</h1>')
    else:
        return HttpResponse('<h1>Page was found</h1>')
#+end_src

#+begin_src python
from django.http import HttpResponse
def my_view(request):
    # ...
    if condition==True:
        return HttpResponse('<h1>Page not found</h1>', status_code='404')
    else:
        return HttpResponse('<h1>Page was found</h1>')
#+end_src

#+begin_src python
from django.http import Http404, HttpResponse
from .models import Product

def detail(request, id):
    try:
        p = Product.objects.get(pk=id)
    except Product.DoesNotExist:
        raise Http404("Product does not exist")
    return HttpResponse("Product Found")
#+end_src

** Clases de Excepicon
Las clases de excepción de Django se definen en el módulo *django.core.exceptions*.

Some important exception types are:
Algunos tipos de excepciones importantes son:
    *ObjectDoesNotExist* (el objeto no existe): todas las excepciones de DoesNotExist (No existe) se heredan de esta excepción base.
    *EmptyResultSet* (Conjunto de resultados vacío): esta excepción se genera si una consulta no devuelve ningún resultado.
    *FieldDoesNotExist* (No existe el campo): esta excepción se genera cuando el campo solicitado no existe.
    *MultipleObjectsReturned* (Varios objetos devueltos): cuando espera que una determinada consulta devuelva solo un objeto, sin embargo, se devuelven varios objetos. Aquí es cuando necesita generar esta excepción.
    *PermissionDenied* (Permiso denegado): esta excepción se genera cuando un usuario no tiene permiso para realizar la acción solicitada.

** Modelar Relaciones::
*Primary Key*
En una base de datos relacional, cada tabla que representa una entidad tiene una columna que tiene un valor único para cada fila. Tal columna o campo se conoce como la clave principal.

Si la clave principal de una tabla aparece como uno de los campos de otra tabla y tiene su propia clave principal, se denomina clave externa.

*** Tipos de Relaciones
*One2One*
Si una clave principal está en un modelo y solo existe un registro en el otro modelo relacionado, se dice que los dos modelos tienen una relación de uno a uno.

#+begin_src python
class college(Model):
    CollegeID = models.IntegerField(primary_key = True)
    name = models.CharField(max_length=50)
    strength = models.IntegerField()
    website=models.URLField()
#+end_src

#+begin_src python
class Principal(models.Model):
    CollegeID = models.OneToOneField(
                College,
                on_delete=models.CASCADE
                )
    Qualification = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
#+end_src

*One2Many*
En una relación de uno a varios, un objeto de un modelo se puede asociar con uno o más objetos de otro modelo. Por ejemplo, un profesor está calificado para enseñar una materia, pero puede haber más de un profesor en una universidad que enseñe la misma materia.

#+begin_src python
class Subject(models.Model):
    Subjectcode = models.IntegerField(primary_key = True)
    name = models.CharField(max_length=30)
    credits = model.IntegerField()
#+end_src

El modelo de profesor tiene su propia clave principal. Tiene una Foreignkey (Clave foránea)  que relaciona este modelo con el modelo sujeto.

#+begin_src python
class Teacher(models.Model):
    TeacherID = models.ItegerField(primary_key=True)
    subjectcode=models.ForeignKey(
                Subject,
                on_delete=models.CASCADE
                  )
    Qualification = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)
#+end_src

*Many2Many*
En una relación de muchos a muchos, varios objetos de un modelo se pueden asociar con varios objetos de otro modelo.

Redefinamos la relación entre el sujeto y los modelos del profesor en el ejemplo anterior. Si más de un profesor puede enseñar la misma materia, un solo profesor puede enseñar más de una materia. Entonces, hay una relación muchos a muchos entre los dos

#+begin_src python
class Teacher(models.Model):
    TeacherID = models.ItegerField(primary_key=True)
    Qualification = models.CharField(max_length=50)
    email = models.EmailField(max_length=50)

class Subject(models.Model):
    Subjectcode = models.IntegerField(primary_key = True)
    name = models.CharField(max_length=30)
    credits = model.IntegerField()
    teacher = model.ManyToManyField(Teacher)
#+end_src

*ondelete*

*CASCADE (CASCADA):* elimina el objeto que contiene la ForeignKey (clave foránea)

*PROTECT (PROTEGER):* evita la eliminación del objeto al que se hace referencia.

*RESTRICT (RESTRINGIR):* evite la eliminación del objeto al que se hace referencia y genera un RestrictedError(Error restringido)

* Migraciones::
El sistema de migración de Django cuenta con los siguientes comandos:

- makemigrations
- migrate
- sqlmigrate
- showmigrations

* Forms::
